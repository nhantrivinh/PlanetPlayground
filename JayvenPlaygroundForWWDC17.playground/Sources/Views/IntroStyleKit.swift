//
//  IntroStyleKit.swift
//  WWDC17
//
//  Created by VinhNhan on 3/31/17.
//  Copyright Â© 2017 VinhNhan. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class IntroStyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawRocketWithFlame(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 81, height: 181), resizing: ResizingBehavior = .aspectFit, flameAlpha: CGFloat = 1, flameScaleInHeight: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 81, height: 181), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 81, y: resizedFrame.height / 181)


        //// Color Declarations
        let fillColor2 = UIColor(red: 0.953, green: 0.953, blue: 0.953, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.922, green: 0.404, blue: 0.404, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 40, y: 0))
        bezierPath.addLine(to: CGPoint(x: 74, y: 68))
        bezierPath.addLine(to: CGPoint(x: 6, y: 68))
        bezierPath.addLine(to: CGPoint(x: 40, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 6, y: 68))
        bezierPath.addLine(to: CGPoint(x: 74, y: 68))
        bezierPath.addLine(to: CGPoint(x: 74, y: 155))
        bezierPath.addLine(to: CGPoint(x: 6, y: 155))
        bezierPath.addLine(to: CGPoint(x: 6, y: 68))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor2.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: -0.39, y: 154.86)
        context.scaleBy(x: 1, y: flameScaleInHeight)

        context.saveGState()
        context.setAlpha(flameAlpha)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 8.18, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 26.56))
        bezier2Path.addLine(to: CGPoint(x: 10.47, y: 19.29))
        bezier2Path.addLine(to: CGPoint(x: 19.67, y: 26.56))
        bezier2Path.addLine(to: CGPoint(x: 29.49, y: 19.91))
        bezier2Path.addLine(to: CGPoint(x: 41.8, y: 26.56))
        bezier2Path.addLine(to: CGPoint(x: 52.57, y: 20.21))
        bezier2Path.addLine(to: CGPoint(x: 62.32, y: 26.56))
        bezier2Path.addLine(to: CGPoint(x: 70.51, y: 20.21))
        bezier2Path.addLine(to: CGPoint(x: 81.85, y: 24.52))
        bezier2Path.addLine(to: CGPoint(x: 72.73, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 8.18, y: 0))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor4.setFill()
        bezier2Path.fill()

        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawStarYellow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 113, height: 113), resizing: ResizingBehavior = .aspectFit, starRotation: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 113, height: 113), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 113, y: resizedFrame.height / 113)


        //// Color Declarations
        let fillColor5 = UIColor(red: 1.000, green: 0.800, blue: 0.000, alpha: 1.000)

        //// Star Drawing
        context.saveGState()
        context.translateBy(x: 61, y: 60)
        context.rotate(by: -starRotation * CGFloat.pi/180)

        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: -4.23, y: -60))
        starPath.addLine(to: CGPoint(x: 12.48, y: -26.51))
        starPath.addLine(to: CGPoint(x: 49.77, y: -21.11))
        starPath.addLine(to: CGPoint(x: 22.8, y: 4.98))
        starPath.addLine(to: CGPoint(x: 29.15, y: 41.8))
        starPath.addLine(to: CGPoint(x: -4.23, y: 24.44))
        starPath.addLine(to: CGPoint(x: -37.6, y: 41.8))
        starPath.addLine(to: CGPoint(x: -31.25, y: 4.98))
        starPath.addLine(to: CGPoint(x: -58.22, y: -21.11))
        starPath.addLine(to: CGPoint(x: -20.93, y: -26.51))
        starPath.close()
        fillColor5.setFill()
        starPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawBuffDude(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 220, height: 180), resizing: ResizingBehavior = .aspectFit, leftArmRotation: CGFloat = 0, rightArmRotation: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 220, height: 180), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 220, y: resizedFrame.height / 180)


        //// Color Declarations
        let fillColor = UIColor(red: 0.920, green: 0.403, blue: 0.403, alpha: 1.000)
        let fillColor2 = UIColor(red: 0.953, green: 0.953, blue: 0.953, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 87.2, y: 97.88))
        bezierPath.addLine(to: CGPoint(x: 135.96, y: 97.88))
        bezierPath.addLine(to: CGPoint(x: 170.43, y: 178.92))
        bezierPath.addLine(to: CGPoint(x: 58.94, y: 178.92))
        bezierPath.addLine(to: CGPoint(x: 87.2, y: 97.88))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bezierPath.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 64, y: 0, width: 96, height: 96))
        fillColor2.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 112, y: 16, width: 43, height: 43))
        fillColor3.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 69, y: 16, width: 43, height: 43))
        fillColor3.setFill()
        oval3Path.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 88, y: 73))
        bezier2Path.addCurve(to: CGPoint(x: 135.49, y: 73), controlPoint1: CGPoint(x: 88, y: 73), controlPoint2: CGPoint(x: 112.4, y: 93.82))
        strokeColor.setStroke()
        bezier2Path.lineWidth = 2
        bezier2Path.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 80, y: 96, width: 65, height: 67))
        fillColor2.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 84, y: 100, width: 27, height: 21))
        fillColor3.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 114, y: 100, width: 27, height: 21))
        fillColor3.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 98, y: 127, width: 13, height: 10))
        fillColor3.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 98, y: 139, width: 13, height: 10))
        fillColor3.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 98, y: 151, width: 13, height: 10))
        fillColor3.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 115, y: 127, width: 13, height: 10))
        fillColor3.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 115, y: 139, width: 13, height: 10))
        fillColor3.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 115, y: 151, width: 13, height: 10))
        fillColor3.setFill()
        rectangle9Path.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 143, y: 101, width: 56, height: 20))
        fillColor2.setFill()
        oval4Path.fill()


        //// Oval 5 Drawing
        context.saveGState()
        context.translateBy(x: 188.22, y: 109.93)
        context.rotate(by: -rightArmRotation * CGFloat.pi/180)

        let oval5Path = UIBezierPath(ovalIn: CGRect(x: -11.22, y: -40.93, width: 22, height: 41))
        fillColor2.setFill()
        oval5Path.fill()

        context.restoreGState()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 155, y: 94, width: 20, height: 19))
        fillColor2.setFill()
        oval6Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 54, y: 121))
        bezier3Path.addCurve(to: CGPoint(x: 26, y: 111), controlPoint1: CGPoint(x: 38.54, y: 121), controlPoint2: CGPoint(x: 26, y: 116.52))
        bezier3Path.addCurve(to: CGPoint(x: 54, y: 101), controlPoint1: CGPoint(x: 26, y: 105.48), controlPoint2: CGPoint(x: 38.54, y: 101))
        bezier3Path.addCurve(to: CGPoint(x: 82, y: 111), controlPoint1: CGPoint(x: 69.46, y: 101), controlPoint2: CGPoint(x: 82, y: 105.48))
        bezier3Path.addCurve(to: CGPoint(x: 54, y: 121), controlPoint1: CGPoint(x: 82, y: 116.52), controlPoint2: CGPoint(x: 69.46, y: 121))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor2.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        context.saveGState()
        context.translateBy(x: 37.06, y: 110.87)
        context.rotate(by: -leftArmRotation * CGFloat.pi/180)

        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: -0.06, y: 0.13))
        bezier4Path.addCurve(to: CGPoint(x: -11.06, y: -20.37), controlPoint1: CGPoint(x: -6.14, y: 0.13), controlPoint2: CGPoint(x: -11.06, y: -9.05))
        bezier4Path.addCurve(to: CGPoint(x: -0.06, y: -40.87), controlPoint1: CGPoint(x: -11.06, y: -31.69), controlPoint2: CGPoint(x: -6.14, y: -40.87))
        bezier4Path.addCurve(to: CGPoint(x: 10.94, y: -20.37), controlPoint1: CGPoint(x: 6.01, y: -40.87), controlPoint2: CGPoint(x: 10.94, y: -31.69))
        bezier4Path.addCurve(to: CGPoint(x: -0.06, y: 0.13), controlPoint1: CGPoint(x: 10.94, y: -9.05), controlPoint2: CGPoint(x: 6.01, y: 0.13))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor2.setFill()
        bezier4Path.fill()

        context.restoreGState()


        //// Oval 7 Drawing
        let oval7Path = UIBezierPath(ovalIn: CGRect(x: 50, y: 94, width: 20, height: 19))
        fillColor2.setFill()
        oval7Path.fill()
        
        context.restoreGState()

    }

    //WARNING: Drawing method for 'PlanetPlayground' cannot be generated due to Trial limits.
    public dynamic class func drawPlanetPlayground(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 160), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 160), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 160)
        
        
        //// Color Declarations
        let fillColor6 = UIColor(red: 0.958, green: 0.958, blue: 0.958, alpha: 1.000)
        let fillColor7 = UIColor(red: 0.439, green: 0.806, blue: 0.862, alpha: 1.000)
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let textForeground = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 80, y: 160))
        bezierPath.addCurve(to: CGPoint(x: 160, y: 80), controlPoint1: CGPoint(x: 124.18, y: 160), controlPoint2: CGPoint(x: 160, y: 124.18))
        bezierPath.addCurve(to: CGPoint(x: 80, y: 0), controlPoint1: CGPoint(x: 160, y: 35.82), controlPoint2: CGPoint(x: 124.18, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 80), controlPoint1: CGPoint(x: 35.82, y: 0), controlPoint2: CGPoint(x: 0, y: 35.82))
        bezierPath.addCurve(to: CGPoint(x: 80, y: 160), controlPoint1: CGPoint(x: 0, y: 124.18), controlPoint2: CGPoint(x: 35.82, y: 160))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor6.setFill()
        bezierPath.fill()
        
        
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 10, y: 10, width: 139, height: 139))
        fillColor7.setFill()
        ovalPath.fill()
        
        
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 14.75, y: 14.75, width: 129.5, height: 129.5))
        fillColor7.setFill()
        oval2Path.fill()
        
        
        //// Group 3
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        
        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 4, y: 4))
        clipPath.addLine(to: CGPoint(x: 155, y: 4))
        clipPath.addLine(to: CGPoint(x: 155, y: 155))
        clipPath.addLine(to: CGPoint(x: 4, y: 155))
        clipPath.addLine(to: CGPoint(x: 4, y: 4))
        clipPath.close()
        clipPath.move(to: CGPoint(x: 79.5, y: 144))
        clipPath.addCurve(to: CGPoint(x: 144, y: 79.5), controlPoint1: CGPoint(x: 115.12, y: 144), controlPoint2: CGPoint(x: 144, y: 115.12))
        clipPath.addCurve(to: CGPoint(x: 79.5, y: 15), controlPoint1: CGPoint(x: 144, y: 43.88), controlPoint2: CGPoint(x: 115.12, y: 15))
        clipPath.addCurve(to: CGPoint(x: 15, y: 79.5), controlPoint1: CGPoint(x: 43.88, y: 15), controlPoint2: CGPoint(x: 15, y: 43.88))
        clipPath.addCurve(to: CGPoint(x: 79.5, y: 144), controlPoint1: CGPoint(x: 15, y: 115.12), controlPoint2: CGPoint(x: 43.88, y: 144))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()
        
        
        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 15, y: 15, width: 129, height: 129))
        strokeColor.setStroke()
        oval3Path.lineWidth = 2
        oval3Path.stroke()
        
        
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        //// Words
        //// Label Drawing
        let labelRect = CGRect(x: 33.38, y: 45, width: 94.25, height: 41)
        let labelTextContent = "PLANET"
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .center
        let labelFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Black", size: 24)!, NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: labelStyle]
        
        let labelTextHeight: CGFloat = labelTextContent.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: labelRect)
        labelTextContent.draw(in: CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        context.restoreGState()
        
        
        //// Label 2 Drawing
        let label2Rect = CGRect(x: 31.11, y: 76, width: 98.77, height: 24)
        let label2TextContent = "PLAYGROUND"
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .center
        let label2FontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Black", size: 14)!, NSForegroundColorAttributeName: textForeground, NSParagraphStyleAttributeName: label2Style]
        
        let label2TextHeight: CGFloat = label2TextContent.boundingRect(with: CGSize(width: label2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: label2Rect)
        label2TextContent.draw(in: CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        context.restoreGState()
        
        
        
        
        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 94, y: 24, width: 14, height: 14))
        fillColor3.setFill()
        oval4Path.fill()
        
        
        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 115, y: 38, width: 8, height: 8))
        fillColor3.setFill()
        oval5Path.fill()
        
        
        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 80, y: 31, width: 4, height: 4))
        fillColor3.setFill()
        oval6Path.fill()
        
        context.restoreGState()
        
    }



    @objc(IntroStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
